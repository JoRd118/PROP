Estudi_01
=========
private double[][] mDistancies =    { {0.0,1.0,2.0,3.0,4.0},
  						                        {1.0,0.0,2.0,3.0,4.0},
							                        {2.0,2.0,0.0,4.0,1.0},
							                        {3.0,3.0,4.0,0.0,1.0},
							                        {4.0,4.0,1.0,1.0,0.0}
							                      };

private int[][] mDisponibilitats =  { {1,1,1,1,0,0,1,0,0,0}, //P0
							                        {0,0,0,1,0,0,1,0,1,0}, //P1
					          		              {1,1,0,1,0,0,1,1,1,0}, //P2
							                        {0,0,1,1,1,1,0,0,0,1}, //P3
							                        {1,0,0,1,0,0,0,0,0,1}  //P4
							                      };


private int[][] mNecessitats =      { {0,1,0,0,1,0,0,1,0,0}, //P0
							                        {0,0,0,1,0,0,1,0,0,0}, //P1
							                        {1,0,1,0,1,0,1,0,1,1}, //P2
							                        {0,0,1,0,1,0,0,1,0,0}, //P3
							                        {1,1,1,0,1,1,1,0,1,1}  //P4
							                      };
Fem el cas P4:

Necessitats          (P4): {1,1,1,0,1,1,1,0,1,1}
Disponibilitats      (P4): {1,0,0,1,0,0,0,0,0,1}
                     --------------------------- 
Necessitats Pendents (P4): {0,1,1,0,1,1,1,0,1,0} (Total 6)

Disponibilitats resta planetes:
P0: {1,1,1,1,0,0,1,0,0,0}
P1: {0,0,0,1,0,0,1,0,1,0}
P2:	{1,1,0,1,0,0,1,1,1,0}
P3:	{0,0,1,1,1,1,0,0,0,1}
 &&
P4: {0,1,1,0,1,1,1,0,1,0}
--------------------------
P0: {0,1,1,0,0,0,1,0,0,0}
P1: {0,0,0,0,0,0,1,0,1,0}
P2:	{0,1,0,0,0,0,1,0,1,0}
P3:	{0,0,1,0,1,1,0,0,0,0}

No retirem cap planeta perquè tots tenen com a mínim un 1,

Eliminem ara les necessitats = 0 (O sigui que no en té).
I passem a parlar de id's
Planetes: [0-P0][1-P1][2-P2][3-P3]
Recursos: [0-R1][1-R2][2-R4][3-R5][4-R6][5-R8]

P4: {1,1,1,1,1,1}

P0: {1,1,0,0,1,0} (Dist: 4.0)
P1: {0,0,0,0,1,1} (Dist: 4.0)
P2:	{1,0,0,0,1,1} (Dist: 1.0)
P3:	{0,1,1,1,0,0} (Dist: 1.0)

Distàncies de P4 als planetes:
P0-P4:4.0
P1-P4:4.0
P2-P4:1.0
P3-P4:1.0

Matriu de distàncies si vull anar de P4 a buscar el recurs del planeta Px
P\R| 0| 1| 2| 3| 4| 5|
----------------------
0  | 4  4  4  4  4  4
1  | 4  4  4  4  4  4
2  | 1  1  1  1  1  1
3  | 1  1  1  1  1  1

Matriu de fluxes + o - perquè tan fa que agafi un recurs com tots els d'un planeta quena hi vaig.

P\R| 0| 1| 2| 3| 4| 5|
----------------------
0  | 1  1  0  0  1  0
1  | 0  0  0  0  1  1
2  | 1  0  0  0  1  1
3  | 0  1  1  1  0  0

Ara definirem les matrius A, B i la C (C=0)

Les facilities i locations seran:

p0r0, p0r1, p0r4, p1r4, p1r5, p2r0, p2r4, p2r5, p3r1, p3r2, p3r3, p4r0, p4r1, p4r2, p4r3, p4r4, p4r5

(A)
                    p4r0 p4r1
p0r0 0 0 0 0 0 0 ... 1    0
.
.
p3r1 0 0 0 0 0 0 ... 0    1


(B) Simètrica
diagonal = 0
p0.. amb p4.. 4
p1.. amb p4.. 4
p2.. amb p4.. 1
p3.. amb p4.. 1

la resta = infinit


=======================
BranchBound: Planeta  [4]: P4
  Nece Pend 6: [1]: r1 [2]: r2 [4]: r4 [5]: r5 [6]: r6 [8]: r8
  Plan Pend 4: [0]: P0 [1]: P1 [2]: P2 [3]: P3
Matriu entrada HUNGARIAN:
[ 0]:   4,0   4,0 infin infin   4,0 infin
[ 1]: infin infin infin infin   4,0   4,0
[ 2]:   1,0 infin infin infin   1,0   1,0
[ 3]: infin   1,0   1,0   1,0 infin infin
[ 4]:   0,0   0,0   0,0   0,0   0,0   0,0
[ 5]:   0,0   0,0   0,0   0,0   0,0   0,0

==========================
PLANETA.......: P4
--------------------------
  Algoritme...: Branch and bound lazy cota hungarian
  TerraFormat.: true
    Cota inicial.......: 10.0
    Planetes analitzats: 10
    Nodes utilitzats...: 7
    Millor recorregut..: 2.0
    Planetes solucio...: P4 P2 P3
==========================




